services:
  web:
    image: web_app
    restart: unless-stopped
    container_name: web
    env_file:
      - .env.mysql
      - .env.mongo
      - .env.web
      - .env
    environment:
      - MONGO_HOSTNAME=mongo
      - MYSQL_HOSTNAME=mysql
    ports:
      - ${WEB_PORT:-3000}:${WEB_PORT:-3000}
    # for hot changes/dev testing
    # volumes:
    #   - ./web:/home/node/app
    networks:
      - app
    depends_on:
      migration:
        condition: service_completed_successfully
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy

  migration:
    build: 
      context: ./web
      dockerfile: Dockerfile
    image: web_app
    container_name: migration
    env_file:
      - .env.mysql
    environment:
      - MYSQL_HOSTNAME=mysql
    # for hot changes/dev testing
    # volumes:
    #   - ./web:/home/node/app
    networks:
      - app
    depends_on:
      mysql:
        condition: service_healthy
      mongo:
        condition: service_healthy
    command: sh -c 'echo "running migration..."; sleep 10; npx knex migrate:latest; echo "migration completed"'

  analytics:
    build:
      context: ./analytics
      dockerfile: Dockerfile
    image: analytics_service
    container_name: analytics
    env_file:
      - .env.mysql
      - .env.mongo
    depends_on:
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy
    networks:
      - app

  mongo:
    image: mongo:8.0.4
    restart: unless-stopped
    container_name: mongo
    env_file:
      - .env.mongo
    volumes:
      - mongo:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:$$MONGO_PORT/test --quiet
      start_period: 10s
      interval: 60s
      timeout: 5s
      retries: 10

  mongo-express:
    image: mongo-express:1.0.2
    restart: unless-stopped
    container_name: mongo-express
    ports:
      - 8081:8081
    env_file:
      - .env.mongo
      - .env.mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
    networks:
      - app
    depends_on:
      mongo:
        condition: service_healthy

  mysql:
    image: mysql:9.2.0
    restart: unless-stopped
    container_name: mysql
    env_file: 
      - .env.mysql
    volumes:
      - mysql:/var/lib/mysql
    networks:
      - app
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "--password=$$MYSQL_PASSWORD"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

networks:
  app:
    driver: bridge

volumes:
  mongo:
  mysql: